apply plugin: 'com.android.application'
//apply plugin: 'com.android.library'

android {

    compileSdkVersion 28

    defaultConfig {
       applicationId "com.shenzhen.xutilsdemo" //library 没有这个属性
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //implementation 'org.xutils:xutils:3.5.0'  //添加了jar 包
    implementation files('libs/xutils-3.5.0.jar')
}

////加入的代码从这里开始
//task clearJar(type: Delete) {
//   delete('libs/Xutils_NetWork-1.0.jar')
//}
//
//task makeJar(type: org.gradle.api.tasks.bundling.Jar) {

//
//    //指定生成的jar名称
//    baseName 'Xutils_NetWork-1.0'
//    //从哪里打包class文件
//    from('build/intermediates/classes/debug/com/shenzhen/xutilsdemo/')
//    //打包到jar后的目录结构
//    into('com/shenzhen/xutilsdemo/')
//    //去掉不需要打包的目录和文件
//    exclude('text/', 'BuildConfig.class', 'R.class', 'BuildConfig.class')
//    exclude {
//        it.name.startsWith('R$');
//    }
//}
//makeJar.dependsOn(clearJar, build)

//加入的代码从这里开始
task clearJar(type: Delete) {
   delete('libs/Xutils_NetWork-1.2.jar')
}
//两个makeJar 都需要测试
//task makeJar(type: org.gradle.api.tasks.bundling.Jar) {
task makeJar(type: Jar) {
    //指定生成的jar名称
    baseName 'Xutils_NetWork-1.2'
    //把项目添加的jar 包也编译到自己的jar包中
    from(project.zipTree('libs/httpcore-4.3.2.jar'))
    from(project.zipTree('libs/xutils-3.5.0.jar'))

    //从哪里打包class文件
    from('build/intermediates/classes/debug/com/shenzhen/xutilsdemo/')
    //打包到jar后的目录结构
    into('com/shenzhen/xutilsdemo/')
    //去掉不需要打包的目录和文件
    exclude('text/', 'BuildConfig.class', 'R.class', 'BuildConfig.class')
    exclude {
        it.name.startsWith('R$');
    }
}
makeJar.dependsOn(clearJar,build)//执行makeJar的时候会在之前执行build task makeDexJar(type: Exec){ def myCommond = [ 'D:\\sdk\\build-tools\\26.0.2\\dx.bat', '--dex', '--output=build/libs/testdex.jar', 'build/libs/test.jar'//使用dx将jar中的代码优化成dex文件，该步骤可以手动命令行完成 ] commandLine myCommond } makeDexJar.dependsOn(makeJar)//执行makeDexJar的时候会在之前执行makeJar

//使用dx将jar中的代码优化成dex文件，该步骤可以手动命令行完成 ] commandLine myCommond } makeDexJar.dependsOn(makeJar)//执行makeDexJar的时候会在之前执行makeJar
/*task makeDexJar(type: Exec){
    def myCommond = [ 'D:\\sdk\\build-tools\\26.0.2\\dx.bat',
                      '--dex', '--output=build/libs/testdex.jar',
                      'build/libs/test.jar']
}*/
  /*
  *
  * */